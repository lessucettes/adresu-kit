
# Adresu Kit

[![My NIP-05](https://img.shields.io/badge/NIP--05-__@dukenukemmustdie.com-8E44AD?logo=nostr&logoColor=white)](https://dukenukemmustdie.com)

**Adresu Kit** is a modular, high-performance Go library of reusable components for **embedding** Nostr policy logic into your applications. It was originally extracted from the battle-tested [Adresu Plugin](https://github.com/lessucettes/adresu-plugin) for the `strfry` relay.

The library provides a collection of configurable, stateful, and stateless filters to validate and reject Nostr events based on a wide range of criteria.

## üöÄ Installation

```bash
go get [github.com/lessucettes/adresu-kit@latest](https://github.com/lessucettes/adresu-kit@latest)
````

## Usage

Each filter is self-contained and can be instantiated via its configuration struct. The `Match` method returns `true` if the event passes the filter's checks, or `false` and an error describing the reason for rejection.

```go
package main

import (
	"fmt"
	"adresu-kit/config"
	"adresu-kit/filters"
	"[github.com/nbd-wtf/go-nostr](https://github.com/nbd-wtf/go-nostr)"
)

func main() {
	// 1. Configure the filter
	cfg := &config.KindFilterConfig{
		DeniedKinds: []int{4}, // Deny kind 4 (DMs)
	}

	// 2. Create a new filter instance
	kindFilter, _, _ := filters.NewKindFilter(cfg.AllowedKinds, cfg.DeniedKinds)

	// 3. Create a sample event
	dmEvent := &nostr.Event{Kind: 4}

	// 4. Match the event against the filter
	pass, reason := kindFilter.Match(nil, dmEvent, nil)

	if !pass {
		fmt.Printf("Event was rejected: %s\n", reason)
		// Output: Event was rejected: blocked: event kind 4 is on the denylist
	}
}
```

## üõ°Ô∏è Filters Overview

### Stateless Filters

These filters make decisions based solely on the event's content.

  * **KindFilter**: Accepts or rejects events based on their `kind` number, using allow/deny lists.
  * **FreshnessFilter**: Rejects events with a `created_at` timestamp that is too old or too far in the future.
  * **SizeFilter**: Rejects events that exceed a configured size limit in bytes.
  * **TagsFilter**: Enforces rules on event tags, such as maximum total count, required tags, or limits on specific tag types (e.g., max 4 `#p` tags).
  * **KeywordFilter**: Scans event content for deny-listed words or patterns using regular expressions.

### Stateful Filters

These filters maintain an internal state (usually in an LRU cache) to make decisions based on patterns over time.

  * **LanguageFilter**: Rejects events written in non-approved languages using the `lingua-go` library. Maintains a cache of authors who have already passed the check.
  * **RateLimiterFilter**: Limits the number of events a user or IP address can send in a given time window.
  * **RepostAbuseFilter**: Tracks the ratio of reposts to original content for each user, rejecting further reposts if the ratio exceeds a threshold.
  * **EphemeralChatFilter**: A specialized set of rules for chat kinds, including anti-flood delays, limits on capital letters, character repetition, and a hybrid PoW-on-rate-limit system.
  * **EmergencyFilter**: A DDoS mitigation filter that rate-limits the arrival of new, previously unseen public keys, both globally and on a per-IP basis.

## ‚öôÔ∏è Utilities

The `nip` package provides helper functions for working with Nostr Improvement Proposals.

  * **NIP-13**: `nip.IsPoWValid()` checks if an event has a valid Proof-of-Work nonce of a given difficulty.

## üìÑ License

This project is licensed under the MIT License. See the `LICENSE` file for details.
